# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: PR Verification

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    name: Build and verify PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "PACKAGE_JSON=$(jq -c . < package.json)" >> $GITHUB_ENV
      - run: echo "NODE_VERSION=${{ fromJson(env.PACKAGE_JSON).engines.node }}" >> $GITHUB_ENV
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: List the state of node modules
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        continue-on-error: true
        run: npm list
      - run: npm ci
      - run: npm run ts-check --if-present
      - run: npm run build --if-present
      - run: npm run test:coverage --if-present

      - name: Prod Infrastructure Deployment what if
        uses: azure/bicep-deploy@b9a4cc4eedfcb883a766e9f9242b2eb274d28e7a # v1
        with:
          type: deploymentStack
          operation: validate
          name: Prod-Infrastructure
          location: West Europe
          scope: resourceGroup
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          resource-group-name: ${{ secrets.AZURE_RESOURCE_GROUP }}
          template-file: ./deploy/main.bicep
          parameters-file: ./deploy/prod/main.bicepparam
          action-on-unmanage-resources: delete
          action-on-unmanage-resourcegroups: delete
          deny-settings-mode: denyWriteAndDelete
          parameters: |
            {
              "containerRegistryPassword":"${{ secrets.DOCKERHUB_TOKEN }}"
            }
